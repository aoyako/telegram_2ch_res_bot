// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aoyako/telegram_2ch_res_bot/downloader (interfaces: Loader)

// Package mock_downloader is a generated GoMock package.
package mock_downloader

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockLoader is a mock of Loader interface
type MockLoader struct {
	ctrl     *gomock.Controller
	recorder *MockLoaderMockRecorder
}

// MockLoaderMockRecorder is the mock recorder for MockLoader
type MockLoaderMockRecorder struct {
	mock *MockLoader
}

// NewMockLoader creates a new mock instance
func NewMockLoader(ctrl *gomock.Controller) *MockLoader {
	mock := &MockLoader{ctrl: ctrl}
	mock.recorder = &MockLoaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLoader) EXPECT() *MockLoaderMockRecorder {
	return m.recorder
}

// Free mocks base method
func (m *MockLoader) Free(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Free", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Free indicates an expected call of Free
func (mr *MockLoaderMockRecorder) Free(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Free", reflect.TypeOf((*MockLoader)(nil).Free), arg0)
}

// Get mocks base method
func (m *MockLoader) Get(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockLoaderMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockLoader)(nil).Get), arg0)
}

// Save mocks base method
func (m *MockLoader) Save(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockLoaderMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockLoader)(nil).Save), arg0)
}
